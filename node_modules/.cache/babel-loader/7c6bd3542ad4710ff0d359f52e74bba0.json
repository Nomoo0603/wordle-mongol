{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\wordle-mongol\\\\src\\\\components\\\\keyboard\\\\Keyboard.tsx\",\n    _s = $RefreshSig$();\n\nimport { getStatuses } from '../../lib/statuses';\nimport { Key } from './Key';\nimport { useEffect } from 'react';\nimport { ENTER_TEXT, DELETE_TEXT } from '../../constants/strings';\nimport { localeAwareUpperCase } from '../../lib/words';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Keyboard = _ref => {\n  _s();\n\n  let {\n    onChar,\n    onDelete,\n    onEnter,\n    solution,\n    guesses,\n    isRevealing\n  } = _ref;\n  const charStatuses = getStatuses(solution, guesses);\n\n  const onClick = value => {\n    if (value === 'ENTER') {\n      onEnter();\n    } else if (value === 'DELETE') {\n      onDelete();\n    } else {\n      onChar(value);\n    }\n  };\n\n  useEffect(() => {\n    const listener = e => {\n      if (e.code === 'Enter') {\n        onEnter();\n      } else if (e.code === 'Backspace') {\n        onDelete();\n      } else {\n        const key = localeAwareUpperCase(e.key); // TODO: check this test if the range works with non-english letters\n\n        if (key.length === 1 && key >= 'A' && key <= 'Z') {\n          onChar(key);\n        }\n      }\n    };\n\n    window.addEventListener('keyup', listener);\n    return () => {\n      window.removeEventListener('keyup', listener);\n    };\n  }, [onEnter, onDelete, onChar]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center mb-1\",\n      children: ['Ф', 'Ц', 'У', 'Ж', 'Э', 'Н', 'Г', 'Ш', 'Ү', 'З', 'К', 'Ъ', 'Щ'].map(key => /*#__PURE__*/_jsxDEV(Key, {\n        value: key,\n        onClick: onClick,\n        status: charStatuses[key],\n        isRevealing: isRevealing\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center mb-1\",\n      children: ['Й', 'Ы', 'Б', 'Ө', 'А', 'Х', 'Р', 'О', 'Л', 'Д', 'П'].map(key => /*#__PURE__*/_jsxDEV(Key, {\n        value: key,\n        onClick: onClick,\n        status: charStatuses[key],\n        isRevealing: isRevealing\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center\",\n      children: [/*#__PURE__*/_jsxDEV(Key, {\n        width: 65.4,\n        value: \"ENTER\",\n        onClick: onClick,\n        children: ENTER_TEXT\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), ['Я', 'Ч', 'Ё', 'С', 'М', 'И', 'Т', 'Ь', 'В', 'Ю', 'Е'].map(key => /*#__PURE__*/_jsxDEV(Key, {\n        value: key,\n        onClick: onClick,\n        status: charStatuses[key],\n        isRevealing: isRevealing\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(Key, {\n        width: 65.4,\n        value: \"DELETE\",\n        onClick: onClick,\n        children: DELETE_TEXT\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Keyboard, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Keyboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Keyboard\");","map":{"version":3,"sources":["C:/Users/DELL/OneDrive/wordle-mongol/src/components/keyboard/Keyboard.tsx"],"names":["getStatuses","Key","useEffect","ENTER_TEXT","DELETE_TEXT","localeAwareUpperCase","Keyboard","onChar","onDelete","onEnter","solution","guesses","isRevealing","charStatuses","onClick","value","listener","e","code","key","length","window","addEventListener","removeEventListener","map"],"mappings":"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","sourcesContent":["import { getStatuses } from '../../lib/statuses'\r\nimport { Key } from './Key'\r\nimport { useEffect } from 'react'\r\nimport { ENTER_TEXT, DELETE_TEXT } from '../../constants/strings'\r\nimport { localeAwareUpperCase } from '../../lib/words'\r\n\r\ntype Props = {\r\n  onChar: (value: string) => void\r\n  onDelete: () => void\r\n  onEnter: () => void\r\n  solution: string\r\n  guesses: string[]\r\n  isRevealing?: boolean\r\n}\r\n\r\nexport const Keyboard = ({\r\n  onChar,\r\n  onDelete,\r\n  onEnter,\r\n  solution,\r\n  guesses,\r\n  isRevealing,\r\n}: Props) => {\r\n  const charStatuses = getStatuses(solution, guesses)\r\n\r\n  const onClick = (value: string) => {\r\n    if (value === 'ENTER') {\r\n      onEnter()\r\n    } else if (value === 'DELETE') {\r\n      onDelete()\r\n    } else {\r\n      onChar(value)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const listener = (e: KeyboardEvent) => {\r\n      if (e.code === 'Enter') {\r\n        onEnter()\r\n      } else if (e.code === 'Backspace') {\r\n        onDelete()\r\n      } else {\r\n        const key = localeAwareUpperCase(e.key)\r\n        // TODO: check this test if the range works with non-english letters\r\n        if (key.length === 1 && key >= 'A' && key <= 'Z') {\r\n          onChar(key)\r\n        }\r\n      }\r\n    }\r\n    window.addEventListener('keyup', listener)\r\n    return () => {\r\n      window.removeEventListener('keyup', listener)\r\n    }\r\n  }, [onEnter, onDelete, onChar])\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"flex justify-center mb-1\">\r\n        {['Ф', 'Ц', 'У', 'Ж', 'Э', 'Н', 'Г', 'Ш', 'Ү', 'З', 'К', 'Ъ', 'Щ'].map((key) => (\r\n          <Key\r\n            value={key}\r\n            key={key}\r\n            onClick={onClick}\r\n            status={charStatuses[key]}\r\n            isRevealing={isRevealing}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className=\"flex justify-center mb-1\">\r\n        {['Й', 'Ы', 'Б', 'Ө', 'А', 'Х', 'Р', 'О', 'Л', 'Д', 'П'].map((key) => (\r\n          <Key\r\n            value={key}\r\n            key={key}\r\n            onClick={onClick}\r\n            status={charStatuses[key]}\r\n            isRevealing={isRevealing}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className=\"flex justify-center\">\r\n        <Key width={65.4} value=\"ENTER\" onClick={onClick}>\r\n          {ENTER_TEXT}\r\n        </Key>\r\n        {['Я', 'Ч', 'Ё', 'С', 'М', 'И', 'Т', 'Ь', 'В', 'Ю', 'Е'].map((key) => (\r\n          <Key\r\n            value={key}\r\n            key={key}\r\n            onClick={onClick}\r\n            status={charStatuses[key]}\r\n            isRevealing={isRevealing}\r\n          />\r\n        ))}\r\n        <Key width={65.4} value=\"DELETE\" onClick={onClick}>\r\n          {DELETE_TEXT}\r\n        </Key>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}