{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\wordle-mongol\\\\src\\\\components\\\\grid\\\\Grid.tsx\";\nimport { MAX_CHALLENGES } from '../../constants/settings';\nimport { CompletedRow } from './CompletedRow';\nimport { CurrentRow } from './CurrentRow';\nimport { EmptyRow } from './EmptyRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Grid = _ref => {\n  let {\n    solution,\n    guesses,\n    currentGuess,\n    isRevealing,\n    currentRowClassName\n  } = _ref;\n  const empties = guesses.length < MAX_CHALLENGES - 1 ? Array.from(Array(MAX_CHALLENGES - 1 - guesses.length)) : [];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [guesses.map((guess, i) => /*#__PURE__*/_jsxDEV(CompletedRow, {\n      solution: solution,\n      guess: guess,\n      isRevealing: isRevealing && guesses.length - 1 === i\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)), guesses.length < MAX_CHALLENGES && /*#__PURE__*/_jsxDEV(CurrentRow, {\n      guess: currentGuess,\n      className: currentRowClassName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), empties.map((_, i) => /*#__PURE__*/_jsxDEV(EmptyRow, {}, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true);\n};\n_c = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["C:/Users/DELL/OneDrive/wordle-mongol/src/components/grid/Grid.tsx"],"names":["MAX_CHALLENGES","CompletedRow","CurrentRow","EmptyRow","Grid","solution","guesses","currentGuess","isRevealing","currentRowClassName","empties","length","Array","from","map","guess","i","_"],"mappings":";AAAA,SAASA,cAAT,QAA+B,0BAA/B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,QAAT,QAAyB,YAAzB;;;AAUA,OAAO,MAAMC,IAAI,GAAG,QAMP;AAAA,MANQ;AACnBC,IAAAA,QADmB;AAEnBC,IAAAA,OAFmB;AAGnBC,IAAAA,YAHmB;AAInBC,IAAAA,WAJmB;AAKnBC,IAAAA;AALmB,GAMR;AACX,QAAMC,OAAO,GACXJ,OAAO,CAACK,MAAR,GAAiBX,cAAc,GAAG,CAAlC,GACIY,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACZ,cAAc,GAAG,CAAjB,GAAqBM,OAAO,CAACK,MAA9B,CAAhB,CADJ,GAEI,EAHN;AAKA,sBACE;AAAA,eACGL,OAAO,CAACQ,GAAR,CAAY,CAACC,KAAD,EAAQC,CAAR,kBACX,QAAC,YAAD;AAEE,MAAA,QAAQ,EAAEX,QAFZ;AAGE,MAAA,KAAK,EAAEU,KAHT;AAIE,MAAA,WAAW,EAAEP,WAAW,IAAIF,OAAO,CAACK,MAAR,GAAiB,CAAjB,KAAuBK;AAJrD,OACOA,CADP;AAAA;AAAA;AAAA;AAAA,YADD,CADH,EASGV,OAAO,CAACK,MAAR,GAAiBX,cAAjB,iBACC,QAAC,UAAD;AAAY,MAAA,KAAK,EAAEO,YAAnB;AAAiC,MAAA,SAAS,EAAEE;AAA5C;AAAA;AAAA;AAAA;AAAA,YAVJ,EAYGC,OAAO,CAACI,GAAR,CAAY,CAACG,CAAD,EAAID,CAAJ,kBACX,QAAC,QAAD,MAAeA,CAAf;AAAA;AAAA;AAAA;AAAA,YADD,CAZH;AAAA,kBADF;AAkBD,CA9BM;KAAMZ,I","sourcesContent":["import { MAX_CHALLENGES } from '../../constants/settings'\r\nimport { CompletedRow } from './CompletedRow'\r\nimport { CurrentRow } from './CurrentRow'\r\nimport { EmptyRow } from './EmptyRow'\r\n\r\ntype Props = {\r\n  solution: string\r\n  guesses: string[]\r\n  currentGuess: string\r\n  isRevealing?: boolean\r\n  currentRowClassName: string\r\n}\r\n\r\nexport const Grid = ({\r\n  solution,\r\n  guesses,\r\n  currentGuess,\r\n  isRevealing,\r\n  currentRowClassName,\r\n}: Props) => {\r\n  const empties =\r\n    guesses.length < MAX_CHALLENGES - 1\r\n      ? Array.from(Array(MAX_CHALLENGES - 1 - guesses.length))\r\n      : []\r\n\r\n  return (\r\n    <>\r\n      {guesses.map((guess, i) => (\r\n        <CompletedRow\r\n          key={i}\r\n          solution={solution}\r\n          guess={guess}\r\n          isRevealing={isRevealing && guesses.length - 1 === i}\r\n        />\r\n      ))}\r\n      {guesses.length < MAX_CHALLENGES && (\r\n        <CurrentRow guess={currentGuess} className={currentRowClassName} />\r\n      )}\r\n      {empties.map((_, i) => (\r\n        <EmptyRow key={i} />\r\n      ))}\r\n    </>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}