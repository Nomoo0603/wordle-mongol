{"ast":null,"code":"import { MAX_CHALLENGES } from '../constants/settings';\nimport { loadStatsFromLocalStorage, saveStatsToLocalStorage } from './localStorage'; // In stats array elements 0-5 are successes in 1-6 trys\n\nexport const addStatsForCompletedGame = (gameStats, count) => {\n  // Count is number of incorrect guesses before end.\n  const stats = { ...gameStats\n  };\n  stats.totalGames += 1;\n\n  if (count >= MAX_CHALLENGES) {\n    // A fail situation\n    stats.currentStreak = 0;\n    stats.gamesFailed += 1;\n  } else {\n    stats.winDistribution[count] += 1;\n    stats.currentStreak += 1;\n\n    if (stats.bestStreak < stats.currentStreak) {\n      stats.bestStreak = stats.currentStreak;\n    }\n  }\n\n  stats.successRate = getSuccessRate(stats);\n  saveStatsToLocalStorage(stats);\n  return stats;\n};\nconst defaultStats = {\n  winDistribution: Array.from(new Array(MAX_CHALLENGES), () => 0),\n  gamesFailed: 0,\n  currentStreak: 0,\n  bestStreak: 0,\n  totalGames: 0,\n  successRate: 0\n};\nexport const loadStats = () => {\n  return loadStatsFromLocalStorage() || defaultStats;\n};\n\nconst getSuccessRate = gameStats => {\n  const {\n    totalGames,\n    gamesFailed\n  } = gameStats;\n  return Math.round(100 * (totalGames - gamesFailed) / Math.max(totalGames, 1));\n};","map":{"version":3,"sources":["C:/Users/DELL/OneDrive/wordle-mongol/src/lib/stats.ts"],"names":["MAX_CHALLENGES","loadStatsFromLocalStorage","saveStatsToLocalStorage","addStatsForCompletedGame","gameStats","count","stats","totalGames","currentStreak","gamesFailed","winDistribution","bestStreak","successRate","getSuccessRate","defaultStats","Array","from","loadStats","Math","round","max"],"mappings":"AAAA,SAASA,cAAT,QAA+B,uBAA/B;AACA,SAEEC,yBAFF,EAGEC,uBAHF,QAIO,gBAJP,C,CAMA;;AAEA,OAAO,MAAMC,wBAAwB,GAAG,CACtCC,SADsC,EAEtCC,KAFsC,KAGnC;AACH;AACA,QAAMC,KAAK,GAAG,EAAE,GAAGF;AAAL,GAAd;AAEAE,EAAAA,KAAK,CAACC,UAAN,IAAoB,CAApB;;AAEA,MAAIF,KAAK,IAAIL,cAAb,EAA6B;AAC3B;AACAM,IAAAA,KAAK,CAACE,aAAN,GAAsB,CAAtB;AACAF,IAAAA,KAAK,CAACG,WAAN,IAAqB,CAArB;AACD,GAJD,MAIO;AACLH,IAAAA,KAAK,CAACI,eAAN,CAAsBL,KAAtB,KAAgC,CAAhC;AACAC,IAAAA,KAAK,CAACE,aAAN,IAAuB,CAAvB;;AAEA,QAAIF,KAAK,CAACK,UAAN,GAAmBL,KAAK,CAACE,aAA7B,EAA4C;AAC1CF,MAAAA,KAAK,CAACK,UAAN,GAAmBL,KAAK,CAACE,aAAzB;AACD;AACF;;AAEDF,EAAAA,KAAK,CAACM,WAAN,GAAoBC,cAAc,CAACP,KAAD,CAAlC;AAEAJ,EAAAA,uBAAuB,CAACI,KAAD,CAAvB;AACA,SAAOA,KAAP;AACD,CA1BM;AA4BP,MAAMQ,YAAuB,GAAG;AAC9BJ,EAAAA,eAAe,EAAEK,KAAK,CAACC,IAAN,CAAW,IAAID,KAAJ,CAAUf,cAAV,CAAX,EAAsC,MAAM,CAA5C,CADa;AAE9BS,EAAAA,WAAW,EAAE,CAFiB;AAG9BD,EAAAA,aAAa,EAAE,CAHe;AAI9BG,EAAAA,UAAU,EAAE,CAJkB;AAK9BJ,EAAAA,UAAU,EAAE,CALkB;AAM9BK,EAAAA,WAAW,EAAE;AANiB,CAAhC;AASA,OAAO,MAAMK,SAAS,GAAG,MAAM;AAC7B,SAAOhB,yBAAyB,MAAMa,YAAtC;AACD,CAFM;;AAIP,MAAMD,cAAc,GAAIT,SAAD,IAA0B;AAC/C,QAAM;AAAEG,IAAAA,UAAF;AAAcE,IAAAA;AAAd,MAA8BL,SAApC;AAEA,SAAOc,IAAI,CAACC,KAAL,CACJ,OAAOZ,UAAU,GAAGE,WAApB,CAAD,GAAqCS,IAAI,CAACE,GAAL,CAASb,UAAT,EAAqB,CAArB,CADhC,CAAP;AAGD,CAND","sourcesContent":["import { MAX_CHALLENGES } from '../constants/settings'\r\nimport {\r\n  GameStats,\r\n  loadStatsFromLocalStorage,\r\n  saveStatsToLocalStorage,\r\n} from './localStorage'\r\n\r\n// In stats array elements 0-5 are successes in 1-6 trys\r\n\r\nexport const addStatsForCompletedGame = (\r\n  gameStats: GameStats,\r\n  count: number\r\n) => {\r\n  // Count is number of incorrect guesses before end.\r\n  const stats = { ...gameStats }\r\n\r\n  stats.totalGames += 1\r\n\r\n  if (count >= MAX_CHALLENGES) {\r\n    // A fail situation\r\n    stats.currentStreak = 0\r\n    stats.gamesFailed += 1\r\n  } else {\r\n    stats.winDistribution[count] += 1\r\n    stats.currentStreak += 1\r\n\r\n    if (stats.bestStreak < stats.currentStreak) {\r\n      stats.bestStreak = stats.currentStreak\r\n    }\r\n  }\r\n\r\n  stats.successRate = getSuccessRate(stats)\r\n\r\n  saveStatsToLocalStorage(stats)\r\n  return stats\r\n}\r\n\r\nconst defaultStats: GameStats = {\r\n  winDistribution: Array.from(new Array(MAX_CHALLENGES), () => 0),\r\n  gamesFailed: 0,\r\n  currentStreak: 0,\r\n  bestStreak: 0,\r\n  totalGames: 0,\r\n  successRate: 0,\r\n}\r\n\r\nexport const loadStats = () => {\r\n  return loadStatsFromLocalStorage() || defaultStats\r\n}\r\n\r\nconst getSuccessRate = (gameStats: GameStats) => {\r\n  const { totalGames, gamesFailed } = gameStats\r\n\r\n  return Math.round(\r\n    (100 * (totalGames - gamesFailed)) / Math.max(totalGames, 1)\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}