{"ast":null,"code":"var _jsxFileName = \"/Users/nomonerdenelkhagvajav/Documents/GitHub/wordle-mongol/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { Grid } from './components/grid/Grid';\nimport { Keyboard } from './components/keyboard/Keyboard';\nimport { InfoModal } from './components/modals/InfoModal';\nimport { StatsModal } from './components/modals/StatsModal';\nimport { SettingsModal } from './components/modals/SettingsModal';\nimport { WIN_MESSAGES, GAME_COPIED_MESSAGE, NOT_ENOUGH_LETTERS_MESSAGE, WORD_NOT_FOUND_MESSAGE, CORRECT_WORD_MESSAGE, HARD_MODE_ALERT_MESSAGE, DISCOURAGE_INAPP_BROWSER_TEXT } from './constants/strings';\nimport { MAX_CHALLENGES, REVEAL_TIME_MS, DISCOURAGE_INAPP_BROWSERS } from './constants/settings';\nimport { isWordInWordList, isWinningWord, solution, findFirstUnusedReveal, unicodeLength } from './lib/words';\nimport { addStatsForCompletedGame, loadStats } from './lib/stats';\nimport { loadGameStateFromLocalStorage, // saveGameStateToLocalStorage,\nsetStoredIsHighContrastMode, getStoredIsHighContrastMode } from './lib/localStorage';\nimport { default as GraphemeSplitter } from 'grapheme-splitter';\nimport './App.css';\nimport { AlertContainer } from './components/alerts/AlertContainer';\nimport { useAlert } from './context/AlertContext';\nimport { Navbar } from './components/navbar/Navbar';\nimport { isInAppBrowser } from './lib/browser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\n  const {\n    showError: showErrorAlert,\n    showSuccess: showSuccessAlert\n  } = useAlert();\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [isGameWon, setIsGameWon] = useState(false);\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false);\n  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false);\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false);\n  const [currentRowClass, setCurrentRowClass] = useState('');\n  const [isGameLost, setIsGameLost] = useState(false);\n  const [isDarkMode, setIsDarkMode] = useState(localStorage.getItem('theme') ? localStorage.getItem('theme') === 'dark' : prefersDarkMode ? true : false);\n  const [isHighContrastMode, setIsHighContrastMode] = useState(getStoredIsHighContrastMode());\n  const [isRevealing, setIsRevealing] = useState(false);\n  const [guesses, setGuesses] = useState(() => {\n    const loaded = loadGameStateFromLocalStorage();\n\n    if ((loaded === null || loaded === void 0 ? void 0 : loaded.solution) !== solution) {\n      return [];\n    }\n\n    const gameWasWon = loaded.guesses.includes(solution);\n\n    if (gameWasWon) {\n      setIsGameWon(true);\n    }\n\n    if (loaded.guesses.length === MAX_CHALLENGES && !gameWasWon) {\n      setIsGameLost(true);\n      showErrorAlert(CORRECT_WORD_MESSAGE(solution), {\n        persist: true\n      });\n    }\n\n    return loaded.guesses;\n  });\n  const [stats, setStats] = useState(() => loadStats());\n  const [isHardMode, setIsHardMode] = useState(localStorage.getItem('gameMode') ? localStorage.getItem('gameMode') === 'hard' : false); // if no game state on load,\n  // show the user the how-to info modal\n  // useEffect(() => {\n  //   if (!loadGameStateFromLocalStorage()) {\n  //     setTimeout(() => {\n  //       setIsInfoModalOpen(true)\n  //     }, WELCOME_INFO_MODAL_MS)\n  //   }\n  // })\n\n  useEffect(() => {\n    DISCOURAGE_INAPP_BROWSERS && isInAppBrowser() && showErrorAlert(DISCOURAGE_INAPP_BROWSER_TEXT, {\n      persist: false,\n      durationMs: 7000\n    });\n  }, [showErrorAlert]);\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n\n    if (isHighContrastMode) {\n      document.documentElement.classList.add('high-contrast');\n    } else {\n      document.documentElement.classList.remove('high-contrast');\n    }\n  }, [isDarkMode, isHighContrastMode]);\n\n  const handleDarkMode = isDark => {\n    setIsDarkMode(isDark);\n    localStorage.setItem('theme', isDark ? 'dark' : 'light');\n  };\n\n  const handleHardMode = isHard => {\n    if (guesses.length === 0 || localStorage.getItem('gameMode') === 'hard') {\n      setIsHardMode(isHard);\n      localStorage.setItem('gameMode', isHard ? 'hard' : 'normal');\n    } else {\n      showErrorAlert(HARD_MODE_ALERT_MESSAGE);\n    }\n  };\n\n  const handleHighContrastMode = isHighContrast => {\n    setIsHighContrastMode(isHighContrast);\n    setStoredIsHighContrastMode(isHighContrast);\n  };\n\n  const clearCurrentRowClass = () => {\n    setCurrentRowClass('');\n  };\n\n  useEffect(() => {// saveGameStateToLocalStorage({ guesses, solution })\n  }, [guesses]);\n  useEffect(() => {\n    if (isGameWon) {\n      const winMessage = WIN_MESSAGES[Math.floor(Math.random() * WIN_MESSAGES.length)];\n      const delayMs = REVEAL_TIME_MS * solution.length;\n      showSuccessAlert(winMessage, {\n        delayMs,\n        onClose: () => setIsStatsModalOpen(true)\n      });\n    }\n\n    if (isGameLost) {\n      setTimeout(() => {\n        setIsStatsModalOpen(true);\n      }, (solution.length + 1) * REVEAL_TIME_MS);\n    }\n  }, [isGameWon, isGameLost, showSuccessAlert]);\n\n  const onChar = value => {\n    if (unicodeLength(`${currentGuess}${value}`) <= solution.length && guesses.length < MAX_CHALLENGES && !isGameWon) {\n      setCurrentGuess(`${currentGuess}${value}`);\n    }\n  };\n\n  const onDelete = () => {\n    setCurrentGuess(new GraphemeSplitter().splitGraphemes(currentGuess).slice(0, -1).join(''));\n  };\n\n  const onEnter = () => {\n    if (isGameWon || isGameLost) {\n      return;\n    }\n\n    if (!(unicodeLength(currentGuess) === solution.length)) {\n      setCurrentRowClass('jiggle');\n      return showErrorAlert(NOT_ENOUGH_LETTERS_MESSAGE, {\n        onClose: clearCurrentRowClass\n      });\n    }\n\n    if (!isWordInWordList(currentGuess)) {\n      setCurrentRowClass('jiggle');\n      return showErrorAlert(WORD_NOT_FOUND_MESSAGE, {\n        onClose: clearCurrentRowClass\n      });\n    } // enforce hard mode - all guesses must contain all previously revealed letters\n\n\n    if (isHardMode) {\n      const firstMissingReveal = findFirstUnusedReveal(currentGuess, guesses);\n\n      if (firstMissingReveal) {\n        setCurrentRowClass('jiggle');\n        return showErrorAlert(firstMissingReveal, {\n          onClose: clearCurrentRowClass\n        });\n      }\n    }\n\n    setIsRevealing(true); // turn this back off after all\n    // chars have been revealed\n\n    setTimeout(() => {\n      setIsRevealing(false);\n    }, REVEAL_TIME_MS * solution.length);\n    const winningWord = isWinningWord(currentGuess);\n\n    if (unicodeLength(currentGuess) === solution.length && guesses.length < MAX_CHALLENGES && !isGameWon) {\n      setGuesses([...guesses, currentGuess]);\n      setCurrentGuess('');\n\n      if (winningWord) {\n        setStats(addStatsForCompletedGame(stats, guesses.length));\n        return setIsGameWon(true);\n      }\n\n      if (guesses.length === MAX_CHALLENGES - 1) {\n        setStats(addStatsForCompletedGame(stats, guesses.length + 1));\n        setIsGameLost(true);\n        showErrorAlert(CORRECT_WORD_MESSAGE(solution), {\n          persist: true,\n          delayMs: REVEAL_TIME_MS * solution.length + 1\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-screen flex flex-col\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      setIsInfoModalOpen: setIsInfoModalOpen,\n      setIsStatsModalOpen: setIsStatsModalOpen,\n      setIsSettingsModalOpen: setIsSettingsModalOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pt-2 px-1 pb-8 md:max-w-7xl w-full mx-auto sm:px-6 lg:px-8 flex flex-col grow\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pb-6 grow\",\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          solution: solution,\n          guesses: guesses,\n          currentGuess: currentGuess,\n          isRevealing: isRevealing,\n          currentRowClassName: currentRowClass\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n        onChar: onChar,\n        onDelete: onDelete,\n        onEnter: onEnter,\n        solution: solution,\n        guesses: guesses,\n        isRevealing: isRevealing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoModal, {\n        isOpen: isInfoModalOpen,\n        handleClose: () => setIsInfoModalOpen(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatsModal, {\n        isOpen: isStatsModalOpen,\n        handleClose: () => setIsStatsModalOpen(false),\n        solution: solution,\n        guesses: guesses,\n        gameStats: stats,\n        isGameLost: isGameLost,\n        isGameWon: isGameWon,\n        handleShareToClipboard: () => showSuccessAlert(GAME_COPIED_MESSAGE),\n        isHardMode: isHardMode,\n        isDarkMode: isDarkMode,\n        isHighContrastMode: isHighContrastMode,\n        numberOfGuessesMade: guesses.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SettingsModal, {\n        isOpen: isSettingsModalOpen,\n        handleClose: () => setIsSettingsModalOpen(false),\n        isHardMode: isHardMode,\n        handleHardMode: handleHardMode,\n        isDarkMode: isDarkMode,\n        handleDarkMode: handleDarkMode,\n        isHighContrastMode: isHighContrastMode,\n        handleHighContrastMode: handleHighContrastMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AlertContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 5\n  }, this) // </div>\n  ;\n}\n\n_s(App, \"cDc54eAAiG6RKFYXEE0LQZWX7eM=\", false, function () {\n  return [useAlert];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/nomonerdenelkhagvajav/Documents/GitHub/wordle-mongol/src/App.tsx"],"names":["useState","useEffect","Grid","Keyboard","InfoModal","StatsModal","SettingsModal","WIN_MESSAGES","GAME_COPIED_MESSAGE","NOT_ENOUGH_LETTERS_MESSAGE","WORD_NOT_FOUND_MESSAGE","CORRECT_WORD_MESSAGE","HARD_MODE_ALERT_MESSAGE","DISCOURAGE_INAPP_BROWSER_TEXT","MAX_CHALLENGES","REVEAL_TIME_MS","DISCOURAGE_INAPP_BROWSERS","isWordInWordList","isWinningWord","solution","findFirstUnusedReveal","unicodeLength","addStatsForCompletedGame","loadStats","loadGameStateFromLocalStorage","setStoredIsHighContrastMode","getStoredIsHighContrastMode","default","GraphemeSplitter","AlertContainer","useAlert","Navbar","isInAppBrowser","App","prefersDarkMode","window","matchMedia","matches","showError","showErrorAlert","showSuccess","showSuccessAlert","currentGuess","setCurrentGuess","isGameWon","setIsGameWon","isInfoModalOpen","setIsInfoModalOpen","isStatsModalOpen","setIsStatsModalOpen","isSettingsModalOpen","setIsSettingsModalOpen","currentRowClass","setCurrentRowClass","isGameLost","setIsGameLost","isDarkMode","setIsDarkMode","localStorage","getItem","isHighContrastMode","setIsHighContrastMode","isRevealing","setIsRevealing","guesses","setGuesses","loaded","gameWasWon","includes","length","persist","stats","setStats","isHardMode","setIsHardMode","durationMs","document","documentElement","classList","add","remove","handleDarkMode","isDark","setItem","handleHardMode","isHard","handleHighContrastMode","isHighContrast","clearCurrentRowClass","winMessage","Math","floor","random","delayMs","onClose","setTimeout","onChar","value","onDelete","splitGraphemes","slice","join","onEnter","firstMissingReveal","winningWord"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { Grid } from './components/grid/Grid'\nimport { Keyboard } from './components/keyboard/Keyboard'\nimport { InfoModal } from './components/modals/InfoModal'\nimport { StatsModal } from './components/modals/StatsModal'\nimport { SettingsModal } from './components/modals/SettingsModal'\nimport {\n  WIN_MESSAGES,\n  GAME_COPIED_MESSAGE,\n  NOT_ENOUGH_LETTERS_MESSAGE,\n  WORD_NOT_FOUND_MESSAGE,\n  CORRECT_WORD_MESSAGE,\n  HARD_MODE_ALERT_MESSAGE,\n  DISCOURAGE_INAPP_BROWSER_TEXT,\n} from './constants/strings'\nimport {\n  MAX_CHALLENGES,\n  REVEAL_TIME_MS,\n  WELCOME_INFO_MODAL_MS,\n  DISCOURAGE_INAPP_BROWSERS,\n} from './constants/settings'\nimport {\n  isWordInWordList,\n  isWinningWord,\n  solution,\n  findFirstUnusedReveal,\n  unicodeLength,\n} from './lib/words'\nimport { addStatsForCompletedGame, loadStats } from './lib/stats'\nimport {\n  loadGameStateFromLocalStorage,\n  // saveGameStateToLocalStorage,\n  setStoredIsHighContrastMode,\n  getStoredIsHighContrastMode,\n} from './lib/localStorage'\nimport { default as GraphemeSplitter } from 'grapheme-splitter'\n\nimport './App.css'\nimport { AlertContainer } from './components/alerts/AlertContainer'\nimport { useAlert } from './context/AlertContext'\nimport { Navbar } from './components/navbar/Navbar'\nimport { isInAppBrowser } from './lib/browser'\n\nfunction App() {\n  const prefersDarkMode = window.matchMedia(\n    '(prefers-color-scheme: dark)'\n  ).matches\n\n  const { showError: showErrorAlert, showSuccess: showSuccessAlert } =\n    useAlert()\n  const [currentGuess, setCurrentGuess] = useState('')\n  const [isGameWon, setIsGameWon] = useState(false)\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false)\n  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false)\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false)\n  const [currentRowClass, setCurrentRowClass] = useState('')\n  const [isGameLost, setIsGameLost] = useState(false)\n  const [isDarkMode, setIsDarkMode] = useState(\n    localStorage.getItem('theme')\n      ? localStorage.getItem('theme') === 'dark'\n      : prefersDarkMode\n      ? true\n      : false\n  )\n  const [isHighContrastMode, setIsHighContrastMode] = useState(\n    getStoredIsHighContrastMode()\n  )\n  \n  const [isRevealing, setIsRevealing] = useState(false)\n  const [guesses, setGuesses] = useState<string[]>(() => {\n    const loaded = loadGameStateFromLocalStorage()\n    if (loaded?.solution !== solution) {\n      return []\n    }\n    const gameWasWon = loaded.guesses.includes(solution)\n    if (gameWasWon) {\n      setIsGameWon(true)\n    }\n\n    if (loaded.guesses.length === MAX_CHALLENGES && !gameWasWon) {\n      setIsGameLost(true)\n      showErrorAlert(CORRECT_WORD_MESSAGE(solution), {\n        persist: true,\n      })\n    }\n\n    return loaded.guesses\n  })\n\n  const [stats, setStats] = useState(() => loadStats())\n\n  const [isHardMode, setIsHardMode] = useState(\n    localStorage.getItem('gameMode')\n      ? localStorage.getItem('gameMode') === 'hard'\n      : false\n  )\n    // if no game state on load,\n    // show the user the how-to info modal\n\n  // useEffect(() => {\n  \n  //   if (!loadGameStateFromLocalStorage()) {\n\n  //     setTimeout(() => {\n  //       setIsInfoModalOpen(true)\n  //     }, WELCOME_INFO_MODAL_MS)\n      \n  //   }\n\n\n  // })\n\n  useEffect(() => {\n    DISCOURAGE_INAPP_BROWSERS &&\n      isInAppBrowser() &&\n      showErrorAlert(DISCOURAGE_INAPP_BROWSER_TEXT, {\n        persist: false,\n        durationMs: 7000,\n      })\n  }, [showErrorAlert])\n\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark')\n    } else {\n      document.documentElement.classList.remove('dark')\n    }\n\n    if (isHighContrastMode) {\n      document.documentElement.classList.add('high-contrast')\n    } else {\n      document.documentElement.classList.remove('high-contrast')\n    }\n  }, [isDarkMode, isHighContrastMode])\n\n  const handleDarkMode = (isDark: boolean) => {\n    setIsDarkMode(isDark)\n    localStorage.setItem('theme', isDark ? 'dark' : 'light')\n  }\n\n  const handleHardMode = (isHard: boolean) => {\n    if (guesses.length === 0 || localStorage.getItem('gameMode') === 'hard') {\n      setIsHardMode(isHard)\n      localStorage.setItem('gameMode', isHard ? 'hard' : 'normal')\n    } else {\n      showErrorAlert(HARD_MODE_ALERT_MESSAGE)\n    }\n  }\n\n  const handleHighContrastMode = (isHighContrast: boolean) => {\n    setIsHighContrastMode(isHighContrast)\n    setStoredIsHighContrastMode(isHighContrast)\n  }\n\n  const clearCurrentRowClass = () => {\n    setCurrentRowClass('')\n  }\n\n  useEffect(() => {\n    // saveGameStateToLocalStorage({ guesses, solution })\n  }, [guesses])\n\n  useEffect(() => {\n    if (isGameWon) {\n      const winMessage =\n        WIN_MESSAGES[Math.floor(Math.random() * WIN_MESSAGES.length)]\n      const delayMs = REVEAL_TIME_MS * solution.length\n\n      showSuccessAlert(winMessage, {\n        delayMs,\n        onClose: () => setIsStatsModalOpen(true),\n      })\n    }\n\n    if (isGameLost) {\n      setTimeout(() => {\n        setIsStatsModalOpen(true)\n      }, (solution.length + 1) * REVEAL_TIME_MS)\n    }\n  }, [isGameWon, isGameLost, showSuccessAlert])\n\n  const onChar = (value: string) => {\n    if (\n      unicodeLength(`${currentGuess}${value}`) <= solution.length &&\n      guesses.length < MAX_CHALLENGES &&\n      !isGameWon\n    ) {\n      setCurrentGuess(`${currentGuess}${value}`)\n    }\n  }\n\n  const onDelete = () => {\n    setCurrentGuess(\n      new GraphemeSplitter().splitGraphemes(currentGuess).slice(0, -1).join('')\n    )\n  }\n\n  const onEnter = () => {\n    if (isGameWon || isGameLost) {\n      return\n    }\n\n    if (!(unicodeLength(currentGuess) === solution.length)) {\n      setCurrentRowClass('jiggle')\n      return showErrorAlert(NOT_ENOUGH_LETTERS_MESSAGE, {\n        onClose: clearCurrentRowClass,\n      })\n    }\n\n    if (!isWordInWordList(currentGuess)) {\n      setCurrentRowClass('jiggle')\n      return showErrorAlert(WORD_NOT_FOUND_MESSAGE, {\n        onClose: clearCurrentRowClass,\n      })\n    }\n\n    // enforce hard mode - all guesses must contain all previously revealed letters\n    if (isHardMode) {\n      const firstMissingReveal = findFirstUnusedReveal(currentGuess, guesses)\n      if (firstMissingReveal) {\n        setCurrentRowClass('jiggle')\n        return showErrorAlert(firstMissingReveal, {\n          onClose: clearCurrentRowClass,\n        })\n      }\n    }\n\n    setIsRevealing(true)\n    // turn this back off after all\n    // chars have been revealed\n    setTimeout(() => {\n      setIsRevealing(false)\n    }, REVEAL_TIME_MS * solution.length)\n\n    const winningWord = isWinningWord(currentGuess)\n\n    if (\n      unicodeLength(currentGuess) === solution.length &&\n      guesses.length < MAX_CHALLENGES &&\n      !isGameWon\n    ) {\n      setGuesses([...guesses, currentGuess])\n      setCurrentGuess('')\n\n      if (winningWord) {\n        setStats(addStatsForCompletedGame(stats, guesses.length))\n        return setIsGameWon(true)\n      }\n\n      if (guesses.length === MAX_CHALLENGES - 1) {\n        setStats(addStatsForCompletedGame(stats, guesses.length + 1))\n        setIsGameLost(true)\n        showErrorAlert(CORRECT_WORD_MESSAGE(solution), {\n          persist: true,\n          delayMs: REVEAL_TIME_MS * solution.length + 1,\n        })\n      }\n    }\n  }\n\n  return (\n    <div className=\"h-screen flex flex-col\">\n      <Navbar\n        setIsInfoModalOpen={setIsInfoModalOpen}\n        setIsStatsModalOpen={setIsStatsModalOpen}\n        setIsSettingsModalOpen={setIsSettingsModalOpen}\n      />\n      <div className=\"pt-2 px-1 pb-8 md:max-w-7xl w-full mx-auto sm:px-6 lg:px-8 flex flex-col grow\">\n        {/* <div>    <h1> Амьтанг таагаарай </h1> */}\n\n\n        <div className=\"pb-6 grow\">\n          <Grid\n            solution={solution}\n            guesses={guesses}\n            currentGuess={currentGuess}\n            isRevealing={isRevealing}\n            currentRowClassName={currentRowClass}\n          />\n        </div>\n        <Keyboard\n          onChar={onChar}\n          onDelete={onDelete}\n          onEnter={onEnter}\n          solution={solution}\n          guesses={guesses}\n          isRevealing={isRevealing}\n        />\n        <InfoModal\n          isOpen={isInfoModalOpen}\n          handleClose={() => setIsInfoModalOpen(false)}\n        />\n        <StatsModal\n          isOpen={isStatsModalOpen}\n          handleClose={() => setIsStatsModalOpen(false)}\n          solution={solution}\n          guesses={guesses}\n          gameStats={stats}\n          isGameLost={isGameLost}\n          isGameWon={isGameWon}\n          handleShareToClipboard={() => showSuccessAlert(GAME_COPIED_MESSAGE)}\n          isHardMode={isHardMode}\n          isDarkMode={isDarkMode}\n          isHighContrastMode={isHighContrastMode}\n          numberOfGuessesMade={guesses.length}\n        />\n        <SettingsModal\n          isOpen={isSettingsModalOpen}\n          handleClose={() => setIsSettingsModalOpen(false)}\n          isHardMode={isHardMode}\n          handleHardMode={handleHardMode}\n          isDarkMode={isDarkMode}\n          handleDarkMode={handleDarkMode}\n          isHighContrastMode={isHighContrastMode}\n          handleHighContrastMode={handleHighContrastMode}\n        />\n        <AlertContainer />\n      </div>\n      </div>\n    // </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}